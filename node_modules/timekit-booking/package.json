{
  "_args": [
    [
      {
        "raw": "timekit-booking@git+https://github.com/timekit-io/booking-js.git#ba65c03",
        "scope": null,
        "escapedName": "timekit-booking",
        "name": "timekit-booking",
        "rawSpec": "git+https://github.com/timekit-io/booking-js.git#ba65c03",
        "spec": "git+https://github.com/timekit-io/booking-js.git#ba65c03",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:timekit-io/booking-js.git#ba65c03",
          "sshUrl": "git+ssh://git@github.com/timekit-io/booking-js.git#ba65c03",
          "httpsUrl": "git+https://github.com/timekit-io/booking-js.git#ba65c03",
          "gitUrl": "git://github.com/timekit-io/booking-js.git#ba65c03",
          "shortcut": "github:timekit-io/booking-js#ba65c03",
          "directUrl": "https://raw.githubusercontent.com/timekit-io/booking-js/ba65c03/package.json"
        }
      },
      "/home/ec2-user/node/sms/node_modules/fl-booking-js"
    ]
  ],
  "_from": "git+https://github.com/timekit-io/booking-js.git#ba65c03",
  "_id": "timekit-booking@1.9.3",
  "_inCache": true,
  "_location": "/timekit-booking",
  "_phantomChildren": {},
  "_requested": {
    "raw": "timekit-booking@git+https://github.com/timekit-io/booking-js.git#ba65c03",
    "scope": null,
    "escapedName": "timekit-booking",
    "name": "timekit-booking",
    "rawSpec": "git+https://github.com/timekit-io/booking-js.git#ba65c03",
    "spec": "git+https://github.com/timekit-io/booking-js.git#ba65c03",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:timekit-io/booking-js.git#ba65c03",
      "sshUrl": "git+ssh://git@github.com/timekit-io/booking-js.git#ba65c03",
      "httpsUrl": "git+https://github.com/timekit-io/booking-js.git#ba65c03",
      "gitUrl": "git://github.com/timekit-io/booking-js.git#ba65c03",
      "shortcut": "github:timekit-io/booking-js#ba65c03",
      "directUrl": "https://raw.githubusercontent.com/timekit-io/booking-js/ba65c03/package.json"
    }
  },
  "_requiredBy": [
    "/fl-booking-js"
  ],
  "_resolved": "git+https://github.com/timekit-io/booking-js.git#ba65c03d7caca979acacea371ff7c9c4aab56710",
  "_shasum": "3933080086ac203ac399c390d9a4564debf5c923",
  "_shrinkwrap": null,
  "_spec": "timekit-booking@git+https://github.com/timekit-io/booking-js.git#ba65c03",
  "_where": "/home/ec2-user/node/sms/node_modules/fl-booking-js",
  "author": {
    "name": "Timekit Inc."
  },
  "bugs": {
    "url": "https://github.com/timekit-io/booking-js/issues"
  },
  "dependencies": {
    "console-polyfill": "^0.2.2",
    "fullcalendar": "^2.4.0",
    "moment": "^2.10.6",
    "moment-timezone": "^0.5.0",
    "sprintf-js": "^1.0.3",
    "timekit-sdk": "^1.3.0"
  },
  "description": "Make a beautiful embeddable booking widget in minutes",
  "devDependencies": {
    "autoprefixer-loader": "^3.1.0",
    "css-loader": "^0.21.0",
    "jasmine": "^2.3.2",
    "jasmine-jquery": "^2.1.1",
    "jquery": "^2.1.4",
    "karma": "^0.13.0",
    "karma-chrome-launcher": "^0.1.12",
    "karma-jasmine": "^0.3.5",
    "karma-jasmine-ajax": "^0.1.12",
    "karma-jasmine-jquery": "^0.1.1",
    "karma-sourcemap-loader": "^0.3.5",
    "karma-spec-reporter": "0.0.19",
    "karma-webpack": "^1.7.0",
    "mustache-loader": "git+https://github.com/laander/mustache-loader.git#loader-utils-as-dependency",
    "node-sass": "^3.4.1",
    "sass-loader": "^3.1.1",
    "style-loader": "^0.13.0",
    "svg-inline-loader": "^0.3.0",
    "webpack": "^1.12.2"
  },
  "gitHead": "ba65c03d7caca979acacea371ff7c9c4aab56710",
  "homepage": "https://github.com/timekit-io/booking-js#readme",
  "license": "MIT",
  "main": "dist/booking.min.js",
  "name": "timekit-booking",
  "optionalDependencies": {},
  "readme": "# Booking.js by Timekit\n\n[![Circle CI](https://img.shields.io/circleci/project/timekit-io/booking-js.svg)](https://circleci.com/gh/timekit-io/booking-js)\n[![Codacy Badge](https://api.codacy.com/project/badge/grade/feb445801acf454a95b1690a75959893)](https://www.codacy.com/app/laander/booking-js)\n\n**Latest release:**  [v1.9.3](https://github.com/timekit-io/booking-js/releases)\n\n> Make a beautiful embeddable booking widget in minutes.\n\n![Booking.js Screenshot](misc/widget-screenshot.png)\n\nUses *FullCalendar* with a custom theme for dynamic calendar rendering with available timeslots fetched from *Timekit* (through the Javascript SDK). The shown appointment slots can be booked with automatic calendar invites sent to both host and visitor. Integrates with *Google Calendar* for automatic availability.\n\nMaintainer: Lasse Boisen Andersen ([la@timekit.io](mailto:la@timekit.io)). PR's are welcome!\n\n## Get started\n\nVisit [Timekit.io](https://www.timekit.io) to get started!  \n\nYou can use the widget in two different ways:  \n\n1. For non-developers where the widget is configured in our UI admin panel. For this, you'll never need to touch any code - just follow the admin panel to get your embed code or hosted url.  \n2. For developers where you can configure the widget on-the-fly for multi-user usage and more control. In this way, you don't need to generate a widget for each user through the Timekit admin. Timekit provides you with a modular and flexible API platform that allows you to integrate availability and bookings deep into your own product.  \n\n*This repo is mainly for community contributions, docs and the curious soul that would like to customize the widget.*\n\n## Dependencies\n\nStuff you need to load:\n\n- [jQuery](https://jquery.com/) (v2.x.x) - primarily because it's a requisite for FullCalendar\n\nBundled together with the library:\n\n- [fullCalendar](http://fullcalendar.io) - a customizable and flexible event calendar built for the browser\n- [moment](https://momentjs.com) - parse, validate, manipulate, and display dates in JavaScript\n- [timekit-js-sdk](https://github.com/timekit-io/js-sdk) - JavaScript SDK for the Timekit.io API\n\n## Module loading\n\n**CDN**  \nTo ensure that we can push out updates, improvements and bugfixes to the library, we recommend that you load the library through our CDN. It's hosted on Amazon Cloudfront so it's snappy enough for production.  \n```html\n<script type=\"text/javascript\" src=\"//ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\"></script>\n<script type=\"text/javascript\" src=\"//cdn.timekit.io/booking-js/v1/booking.min.js\" defer></script>\n```\n\n**UMD through NPM**  \nThe module is published on NPM and can be require'd as a CommonJS, AMD or in a script tag.  \n`npm install timekit-booking`\n```javascript\n// Booking.js still needs access to jquery, so make sure its available\nrequire('jquery')\n// Pull in the module, ES2015 imports also works:\n// import TimekitBooking from 'timekit-booking'\nvar TimekitBooking = require('timekit-booking')\n// Booking.js is now available as local var TimekitBooking instead of global window.timekitBooking\nvar widget = new TimekitBooking();\n```\n\n## Usage\n\n**Autoload**  \nThe simplest and most universally compatible usage is with autoload. This will defer the loading of the library until the whole document has loaded and then look for `window.timekitBookingConfig` - if found, the library is loaded automatically. Note that in single page applications, you should not use this approach (see next section).\n\n```html\n<div id=\"bookingjs\">\n  <script type=\"text/javascript\" src=\"//ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\"></script>\n  <script type=\"text/javascript\" src=\"//cdn.timekit.io/booking-js/v1/booking.min.js\" defer></script>\n  <script type=\"text/javascript\">\n    window.timekitBookingConfig = {\n      app:      'your-app-slug-here',\n      email:    'marty.mcfly@timekit.io',\n      apiToken: 'bNpbFHRmrfZbtS5nEtCVl8sY5vUkOFCL',\n      calendar: '8687f058-5b52-4fa4-885c-9294e52ab7d4',\n      name:     'Marty McFly',\n      avatar:   '../misc/avatar-mcfly.png'\n    };\n  </script>\n</div>\n```\n\n**Instantiation**  \nIf you intent to run multiple instances or want more control over initialization order, create a new instance. This is ideal for usage in single page applications like Angular.js, where you'd injecting `<div id=\"bookingjs\">` async in your template and control it through JS in your controller/directive/component code.\n\n```html\n<div id=\"bookingjs\">\n  <script type=\"text/javascript\" src=\"//ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\"></script>\n  <script type=\"text/javascript\" src=\"//cdn.timekit.io/booking-js/v1/booking.min.js\"></script>\n  <script type=\"text/javascript\">\n    var widget = new TimekitBooking();\n    widget.init({\n      app:      'your-app-slug-here',\n      email:    'marty.mcfly@timekit.io',\n      apiToken: 'bNpbFHRmrfZbtS5nEtCVl8sY5vUkOFCL',\n      calendar: '8687f058-5b52-4fa4-885c-9294e52ab7d4'\n    });\n  </script>\n</div>\n```\n\n## Authentication\n\nThe widget connects to the Timekit API behind the scenes and requires a Timekit account.\n\nYou can either connect with a Google account (recommended) or create a plain account (you'd have to enter availability and pull out events through the API).  \nVisit the [setup wizard on Timekit](http://timekit.io).\n\nThe `app`, `email` and `apiToken` settings are the key part here. When you've registered an app, created a user and generated a widget credentials, you get a special client-token with limited access. It's only capable of hitting certain endpoints so your account stays secure when using the widget in a public browser environment.\n\n## Configuration\n\nBooking.js is made for various use-cases, so it's really extensible and customizable. We augment all the intrinsic options so you can overwrite them as needed, e.g. Timekit FindTime options or FullCalendar settings.\n\n### Example\n\n```javascript\n{\n\n  // Required\n  app:                      '',   // Your Timekit registered app slug\n  email:                    '',   // Your Timekit user's email (used for auth)\n  apiToken:                 '',   // Your Timekit user's apiToken (as generated through the wizard)\n  calendar:                 '',   // Your Timekit calendar ID that bookings should end up in\n\n  // Optional\n  targetEl:                 '#bookingjs', // Which element should we the library load into\n  name:                     '',   // Display name to show in the header and timezone helper\n  avatar:                   '',   // Provide an image URL for a circular image avatar\n  autoload:                 true, // Auto initialization if config object is found on window var\n  includeStyles:            true, // Inject fullCalendar and library styles in <head>\n  showCredits:              true, // Display a \"Powered by Timekit\" attribution footer (thanks!)\n  goToFirstEvent:           true, // Display and scroll to the first upcoming event in the calendar (to avoid showing a blank calendar)\n  bookingGraph:             'instant', // Set which booking flow graph that should be used (also supports \"confirm_decline\", see below)\n\n  // Timekit JS SDK (see below)\n  timekitConfig:            { ... },\n\n  // Timekit FindTime endpoint (see below)\n  timekitFindTime:          { ... },\n\n  // Timekit CreateBooking endpoint (see below)\n  timekitCreateBooking:     { ... },\n\n  // Locale support presets (see below)\n  localization:             { ... },\n\n  // FullCalendar options (see below)\n  fullCalendar:             { ... },\n\n  // Customize form fields (see below)\n  bookingFields:            { ... },\n\n  // Register callbacks on events (see below)\n  callbacks:                { ... }\n\n}\n```\n\n### - `timekitConfig`\n\nYou can pass any of the [Timekit JS SDK](https://github.com/timekit-io/js-sdk) settings directly to the widget. This is mostly relevant if you're building a tighter integration with Timekit and have your own app registered on the platform.\n\nAs a shorthand, the app slug can be set using a root-level `app` config key too.\n\n```javascript\ntimekitConfig: {\n  app:          'your-app-slug-here' // Specify your app slug\n}\n```\n\n### - `timekitFindTime`\n\nThe Find Time algorithm is a powerful query tool for availability. Booking.js is calling the endpoint `[POST] /findtime` through the JS SDK and takes all the arguments as mentioned on the official [docs](http://developers.timekit.io/docs/findtime). The most powerful aspect are the [filters](http://developers.timekit.io/docs/find-time-filters). By default, there's no filters applied.\n\nThere's only three default arguments out of the box:\n\n```javascript\ntimekitFindTime: {\n  future:       '4 weeks',      // Default, how long time into the future that timeslots should be returned\n  length:       '1 hour',       // Default, the duration of the bookable timeslots\n  emails:       [config.email], // Inserted dynamically from the \"email\" setting in the general config\n},\n```\n\n### - `timekitCreateBooking`\n\nWhen booking an event, the widget will call the `[POST] /bookings` endpoint through the JS SDK.\n\nThe booking engine in Timekit is a powerful state machine that can take input data (event details and customer info) and perform actions on that based on a chosen \"flow graph\".\n\nAt the time of writing, Timekit supports two graphs:  \n1) `instant` - automatically confirm any incoming bookings, save it to calendar and send out notifications  \n2) `confirm_decline` - creates the booking as tentative and send notification to owner with confirm/decline actions  \n\nThese can be set using the `bookingGraph` config key on the root config level.\n\nYou can override specific endpoint settings like so:\n\n```javascript\ntimekitCreateBooking: {\n  graph:          'instant',       // Inserted based on \"bookingGraph\" specified. See description above on flow graph\n  action:         'confirm',       // If \"instant\" graph is chosen, it will instantly perform the \"confirm\" action. See description above on flow graph\n  event: {    \n    where:        'Online',        // Default, you may want to customize this to a specific location, TBD or whatever fits\n    invite:       true,            // Default, makes sure that participants (the visitor) is sent a Google invite\n    my_rsvp:      'accepted',      // Default, makes sure that the host has accepted the created event in Google\n    start:        data.start,      // Inserted dynamically from the chosen timeslot\n    end:          data.end,        // Inserted dynamically from the chosen timeslot\n    what:         config.name + ' x '+ data.name, // Inserted dynamically based on the host and visitors names (you can replace it with a static string)\n    calendar_id:  config.calendar, // Inserted dynamically from the \"calendar\" setting in the general config\n    participants: [config.email, data.email], // Inserted dynamically based on host and visitors ()\n    description:  data.comment || '' // Inserted dynamically based on the visitor's supplied comment (if field is enabled)\n  },\n  customer: {\n    name:         data.name,       // Inserted dynamically based on visitors name\n    email:        data.email,      // Inserted dynamically based on visitors email\n    timezone:     moment.tz.guess() // Inserted dynamically based on visitors timezone (sniffed from browser/device settings)\n  }\n},\n```\n\n### - `fullCalendar`\n\nYou can supply and override all the [FullCalendar settings](http://fullcalendar.io/docs/):\n\n```javascript\nfullCalendar: {\n  header: {\n    left:       '',\n    center:     '',\n    right:      'today, prev, next'\n  },\n  views: {\n    agenda: {\n      displayEventEnd: false\n    }\n  },\n  allDaySlot:   false,\n  scrollTime:   '08:00:00',\n  timezone:     'local',\n  defaultView:  sizing.view,     // Inserted dynamically based on the current width of the widget\n  height:       sizing.height,   // Inserted dynamically based on the current width of the widget\n  eventClick:   function(event), // Handled internally in Booking.js (overwrite if you want to replace the booking page)\n  windowResize: function(view)   // Handled internally in Booking.js (overwrite if you want to disable or change automatic resizing)\n}\n```\n\n*See below for FullCalendar language support.*\n\n### - `localization`\n\nFor quick localization of time/date formats, we provide a simple \"preset\" setting, `timeDateFormat`, that sets a range of different FullCalendar and localization settings.\n\nBy default, it's set to \"12-hour clock, M/D/Y date format, Sunday first day of week\" (`12h-mdy-sun`). It can be changed to \"24-hour clock, D/M/Y date format, Monday first day of week\" (`24h-dmy-mon`).\n\nSee `/examples/local-preset.htm`\n\n```javascript\nlocalization: {\n  showTimezoneHelper: true, // Should the timezone difference helper (bottom) be shown?\n  timeDateFormat: '12h-mdy-sun', // US-style per default. For EU-style formatting, use '24h-dmy-mon'\n  bookingDateFormat: 'MMMM D, YYYY', // Override the default date format on the booking page\n  bookingTimeFormat: 'h:mma' // Override the default time format on the booking page\n  strings: { ... } // See below\n},\n```\n\nFor full language support, FullCalendar also takes a [\"lang\" option](http://fullcalendar.io/docs/text/lang/), accompanied by a language file. Make sure to use defer attribute on a script tag loading the language file if you are deferring booking.js, language file should be loaded after booking.js, but before initialization.\n\nRemember to set `localization.timeDateFormat` to false so it doesn't override the language file's settings.\n\nSee `/examples/local-language.htm`\n\n```javascript\nfullCalendar: {\n  lang: 'de'\n},\nlocalization: {\n  timeDateFormat: false\n}\n```\n\nIf you're using the widget in another language, you might want to customize the text strings used in e.g. submit button and success message. This can be done in the `localization.strings` key.\n\nSee `/examples/local-strings.htm`\n\n```javascript\nlocalization: {\n  strings: { // Customize string used in the widget, defaults are shown below\n    submitText: 'Book it',\n    successMessageTitle: 'Thanks!',\n    successMessageBody: 'An invitation has been sent to: <br /> %s <br /><br /> Please accept the invitation to confirm the booking.',\n    timezoneHelperLoading: 'Loading..',\n    timezoneHelperDifferent: 'Your timezone is %s hours %s of %s (calendar shown in your local time)',\n    timezoneHelperSame: 'You are in the same timezone as %s'\n  }\n}\n```\n\n### - `bookingFields`\n\nYou can customize the booking form fields and their settings in this section. Only the `name`, `email` and `comment` fields are enabled by default. The `name` and `email` fields have to be enabled and is always required (for the event creation to work properly). All other fields can be enabled/disabled.\n\nIf you're collecting user information before loading the widget, it can be useful to inject it into the form by setting the `prefilled` keys - just pass in the values and they will be set upon load. Combine it with `locked` to lock the fields for user input.\n\nSee `/examples/fields.htm`\n\n```javascript\nbookingFields: {\n  name: {\n    placeholder: 'Full name',\n    prefilled: false,\n    locked: false\n  },\n  email: {\n    placeholder: 'E-mail',\n    prefilled: false,\n    locked: false\n  },\n  comment: {\n    enabled: true,\n    placeholder: 'Comment',\n    prefilled: false,\n    required: false,\n    locked: false\n  },\n  phone: {\n    enabled: false,\n    placeholder: 'Phone number',\n    prefilled: false,\n    required: false,\n    locked: false\n  },\n  voip: {\n    enabled: false,\n    placeholder: 'Skype username',\n    prefilled: false,\n    required: false,\n    locked: false\n  },\n  location: {\n    enabled: false,\n    placeholder: 'Location',\n    prefilled: false,\n    required: false,\n    locked: false\n  }\n}\n```\n\n### - `callbacks`\n\nYou can hook into events happening throughout the user flow and perform asynchronous events. This is especially powerful for saving user data to your CRM system or redirect users to a payment gateway after booking is finished.\n\nInspect to source code to learn more about in which order callbacks are fired. Complete list:\n\n```javascript\ncallbacks: {\n  findTimeStarted:          function(args) {},\n  findTimeSuccessful:       function(response) {},\n  findTimeFailed:           function(response) {},\n  createBookingStarted:     function(args) {},\n  createBookingSuccessful:  function(response) {},\n  createBookingFailed:      function(response) {},\n  getUserTimezoneStarted:   function(args) {},\n  getUserTimezoneSuccessful:function(response) {},\n  getUserTimezoneFailed:    function(response) {},\n  fullCalendarInitialized:  function() {},\n  renderCompleted:          function() {},\n  showBookingPage:          function(event) {},\n  closeBookingPage:         function() {},\n  submitBookingForm:        function(values) {}\n}\n```\n\n## Methods\n\nAfter you instantiated the widget, you can control it with the following methods:\n\n```javascript\nvar widget = new TimekitBooking();\nwidget.init(config);          // Initializes the widget with the given config\nwidget.render();              // Re-renders the widget with it's instance config\nwidget.setConfig(config);     // Push a new config into it (call render() afterwards)\nwidget.getConfig();           // Returns the current config\nwidget.destroy();             // Cleans the DOM element and empty config\nwidget.fullCalendar(action);  // Direct access to FullCalendar's own method (for advanced use)\n```\n\n*Only available when your using the instantiation approach and not autoload*\n\n## Roadmap/todos\n\nSee [Issues](https://github.com/timekit-io/booking-js/issues) for feature requests, bugs etc.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/timekit-io/booking-js.git"
  },
  "scripts": {
    "build": "webpack && webpack --config webpack.config.min.js",
    "test": "webpack && webpack --config webpack.config.min.js && karma start --single-run"
  },
  "version": "1.9.3"
}
